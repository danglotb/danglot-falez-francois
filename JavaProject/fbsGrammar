list_function			:= 	*  function

function				:= 	type "function" function_name "(" ")" "{" list_instruction "}"
						| 	type "function" function_name "(" list_parameter_init ")" "{" list_instruction "}"

list_parameter_init		:= 	parameter_init
						|	parameter_init "," list_parameter_init
						
list_parameter			:= 	parameter
						|	parameter "," list_parameter

parameter_init			:=	type variable_name

parameter				:=	variable_name
						|	number

list_instruction		:= 	* instruction
		
instruction				:=	structure
						|	singleLine_instruction ";"
						|	special_instruction ";"
						
special_instruction		:=	"display" number
						|	"display" string
						|	return_instruction
						
return_instruction		:=	"return" number
						
singleLine_instruction	:=	allocation_instruction
						|	declaration_instruction
						|	call_function

allocation_instruction 	:= 	variable_name "=" number
						|	variable_name "=" variable_name
						|	variable_name "=" call_function
						
declaration_instruction := 	type allocation_instruction
						|	type variable_name
				
call_function			:=	function_name "(" ")"
						|	function_name "(" list_parameter ")"		

block_instruction		:=	instruction
						|	"{" list_instruction "}"

structure				:=	"while" "(" boolean_expresion ")" block_instruction
						|	structure_if	
					
structure_if			:= 	"if" "(" boolean_expresion ")" block_instruction
						|	"if" "(" boolean_expresion ")" block_instruction "else" block_instruction
						|	"if" "(" boolean_expresion ")" block_instruction "else"	structure

boolean_expresion		:= 	boolean
						|	number op_compare number
						|	variable_name op_compare number
						|	number op_compare variable_name
						|	variable_name op_compare variable_name
						|	"(" number op_compare number ")"
						|	"(" variable_name op_compare number ")"
						|	"(" number op_compare variable_name ")"
						|	"(" variable_name op_compare variable_name ")"
							
op_compare				:= 	"<"
						|	">"
						|	"=="
						|	">="
						|	"<="
					
op_arithmetic			:=	"+"
						|	"-"
						|	"/"
						|	"%"
						|	"*"
						
type 					:=	"int"
						|	"float"
						|	"boolean"
						|	"void"

boolean					:= 	"true"
						|	"false"
					
number					:=	integer
						|	decimal
						|	variable_name
						|	call_function
						|	number op_arithmetic number

integer					:= [(0-9)+]

decimal					:= [(0-9)+(.)(0-9)+]

string					:= [(")(a-zA-Z0-9)*(")]

variable_name			:= [(a-zA-Z)(a-zA-Z0-9_)*]

function_name			:= [(a-zA-Z)(a-zA-Z0-9_)*]
